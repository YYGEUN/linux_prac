#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/procfs.h>
#include <sys/sem.h>
#include <arpa/inet.h>
#include <signal.h>
#include <sys/socket.h>
#include <pthread.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h> //C언어

#define MAXLINE 1024
#define MAXSPEED 230
#define MINSPEED 3
#define SPEEDCHANGE_V 3
// 192.168.50.31

void error_handling(char* message);

int total_speed=0;
char state[1024];
int ac=0;
int br=0;
int speed = 0; 
int number = 0;

struct mydata {
	int pid;
  int type;
	int rotatevalue;
	char msg[256];
};

typedef struct {
	int* clnt_sock;
  int* speed;
	char* message;
}recv_data;

void increase_speed() {
    speed += SPEEDCHANGE_V;
    printf("Speed increased to %d\n", speed);
}

void decrease_speed() {
    speed -= SPEEDCHANGE_V;
    printf("Speed decreased to %d\n", speed);
}

void decrease_speed2() {
    speed -= SPEEDCHANGE_V*2;
    printf("Speed decreased to %d\n", speed);
}

void* send_function(void* clnt_sock){
	int* cs=(int*)clnt_sock;	
	while(1){
		char message[30];
    snprintf(message, sizeof(speed), "%d", speed);
    if(speed > 0 || speed < MAXSPEED) send(*cs, message, strlen(message), 0);
    sleep(0.1);
	}
}

void* receive_function(void* rcvdt){
	recv_data* data =(recv_data*)rcvdt;

  int n,fd,status;
  int fipeline[2];
  pid_t pid;
	if (pipe(fipeline)) {
		perror("pipe()");
	}

  fd=open("log.txt",O_CREAT|O_RDWR|O_APPEND, 0666);     
  if(fd<0){                 
    printf("file open error\n");                     
  }    
  FILE *fdfile = fdopen(fd,"w");
  if (fdfile == NULL) {
    perror("fdopen");
  }

	while(1){
		int str_len=read(*(data->clnt_sock),data->message,sizeof(char)*30);
    if(strcmp(data->message,state))
    {
      printf("\n바뀌었습니다. 저장을 진행합니다.");
      strcpy(state,data->message);
      printf("\n <- client : %s\n",data->message);
      number ++;

      time_t timer; // 매번 불러와야하는지? while밖에있으면 ?
      struct tm* t;
      timer = time(NULL);
      t = localtime(&timer);

      pid = fork();
      if(pid < 0)
      {
        perror("fork error");
      }
      else if(pid == 0)
      {
        fprintf(fdfile, "현재시간 : %d시 %d분 %d초 \n%d번째 명령어 : %s\n", t->tm_hour,t->tm_min,t->tm_sec,number,state);
        
        return 0;
      }
      else
      {
        write(fipeline[1],state,sizeof(state));
        pid = wait(&status);
      }
    }
  }
  close(fd);
}

void* receive_function2(void* rcvdt){
	recv_data* data =(recv_data*)rcvdt;
	while(1)
	{
		// sleep(1);
		// printf("%s\n",state);
		if(strcmp(state,"ac") == 0)
		{
      if(speed < MAXSPEED) increase_speed();
      sleep(0.1);
		}
		if(strcmp(state,"br") == 0)
		{
			if(speed >= MINSPEED) decrease_speed2();
      sleep(0.1);
		}
		if(strcmp(state,"nope") == 0)
		{
			if(speed >= MINSPEED) decrease_speed();
      sleep(0.1);
    }
	}
}


int main(int argc, char *argv[]) {
	int server_socket, client_socket, status;
  pid_t pid;
  socklen_t addrlen;
  int readn;
  int speed[MAXLINE];
  char buf[MAXLINE];
  char message[MAXLINE];
  struct sockaddr_in client_addr, server_addr;

  if((server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    	return 1;
	if(server_socket==-1){
		perror("socket() error");	
	}
    memset((void *)&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(atoi(argv[1]));

	if(bind(server_socket,(struct sockaddr*) &server_addr,sizeof(server_addr))==-1){
		perror("bind() error");
	}

    if(listen(server_socket, 5) == -1) {
    	perror("listen error");
        return 1;
    }
    

  printf("신호대기중 .....\n");
  // signal(SIGCHLD, SIG_IGN);

  addrlen = sizeof(client_addr);
  client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &addrlen);
  if(client_socket == -1) {
    perror("accept error\n");
  }
  printf("------ 연결성공 -----\n");

  recv_data rcvdt;
  rcvdt.clnt_sock=&client_socket;
  rcvdt.message=message;
  rcvdt.speed=speed;



  pthread_t p_thread[3];	
  int t;
  for(t=0;t<3;t++){
    if(t==0) pthread_create(&p_thread[t],NULL,send_function,(void*)&client_socket);
    else if(t==1)pthread_create(&p_thread[t],NULL,receive_function,(void*)&rcvdt);
    else if(t==2)pthread_create(&p_thread[t],NULL,receive_function2,(void*)&rcvdt);
  }
      
  pthread_join(p_thread[0],(void **)&status);
  pthread_join(p_thread[1],(void **)&status);
	pthread_join(p_thread[2],(void **)&status);

  close(client_socket);
  close(server_socket);
  

  return 0;
}



void error_handling(char* message)
{
	fputs(message,stderr);
	fputc('\n',stderr);
	exit(1);
}
